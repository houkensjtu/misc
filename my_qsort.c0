#use <string>
#use <conio>

int partition(int[] A, int pi, int lo, int hi);
void _swap(int[] A, int i, int j);
void qsort(int[] A, int lo, int hi);

void qsort(int[] A, int lo, int hi)
{
   if (hi > lo){
      int pi = partition(A, hi-1, lo, hi);
      qsort(A, lo, pi);
      qsort(A, pi + 1, hi);
   }
   else{
      return;
   }
}

int partition(int[] A, int pi, int lo, int hi)
//@requires lo >= 0 && hi <= \length(A) && lo <= hi;
//@requires pi >= lo && pi <= hi;
//@ensures \result >= lo && \result < hi;
//@ensures ge_seg(A[\result], A, lo, \result);
//@ensures le_seg(A[\result], A, \result, hi);
{
  _swap(A, lo, pi);
  int pivot = A[lo];
  int right = hi - 1;
  int left = lo + 1;
  while(left <= right)
  //@loop_invariant left >= lo + 1 && right <= hi && left <= right + 1;
  {
    if(A[left] > A[lo]){
       _swap(A, left, right);
       right--;
    }
    else{
       left++;
    }
  }
  
  _swap(A, lo, right);
  return right;
}

void _swap(int[] A, int i, int j)
{
   int temp = A[i];
   A[i] = A[j];
   A[j] = temp;
}

int main()
{
  int[] A = alloc_array(int, 20);

  println("** Test sort **");
  for(int i = 0; i < 20; i++){
     A[i] = 122 - i*i;
     printint(A[i]); println("");
  }

  qsort(A, 0, 20);

  println("** After sort **");
  
  for(int i = 0; i < 20; i++){
     printint(A[i]); println("");
  }

  println("END");

  return 0;  
}

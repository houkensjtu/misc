#use <conio>
#use <string>
#use <rand>


int partition(int[] A, int pi, int lo, int hi);
void swap(int[] A, int i1, int i2);
void sort(int[] A, int lo, int hi);
int max(int[] A, int lo, int hi);
void display(int[] A, int lo, int hi, int max);
int main()
{
  int[] A = alloc_array(int, 30);

  for (int i = 0; i < 30; i++){
    A[i] = (i+10)*(i-45) + 1000;
  }

  int m = max(A, 0, 30);
  print("The maximum of the array is:");
  printint(m);
  println("");
  
  println("Before sort:");
  for (int i = 0; i < 30; i++){
    printint(A[i]);
    print(",");
  }
  println("");

  display(A, 0, 29, m);
  sort(A, 0, 29);

  println("After sort:");

  for (int i = 0; i < 30; i++){
    printint(A[i]);
    print(",");
  }
  println("");
  display(A, 0, 29, m);

  return 0;
}


void sort(int[] A, int lo, int hi)
{
  int pi = lo + (hi - lo) / 2;
  if (lo >= hi) return;

  int mid = partition(A, pi, lo, hi);
  sort(A, lo, mid - 1);
  sort(A, mid + 1, hi);

  display(A, 0, 30, 500);
}


int partition(int[] A, int pi, int lo, int hi)
{
  int pivot = A[pi];
  swap(A, pi, lo);

  int left = lo + 1;
  int right = hi;

  while(left < right)
  {
    if (A[left] < pivot){
      left += 1;
    }
    else{
      swap(A, left, right);
      right -= 1;
    }
  }

  //@assert left == right;
  if (A[left] < pivot) {
    swap(A, left, lo);
    return left;
  }
  else{
    swap(A, left - 1, lo);
    return left - 1;
  }
}


void swap(int[] A, int i1, int i2)
{
  int temp = A[i1];
  A[i1] = A[i2];
  A[i2] = temp;
}

int max(int[] A, int lo, int hi)
{
  int result = A[lo];
  for (int i = lo; i < hi; i++){
    if(A[i] >= result){
      result = A[i];
    }
  }
  return result;
}

void display(int[] A, int lo,int hi, int max)
{
  int height = 0;
  for (int i = lo; i < hi; i++){
    height = (A[i] * 30 / max);
    while(height>0) {
      print("*");
      height--;
    }
    println("");
  }
}